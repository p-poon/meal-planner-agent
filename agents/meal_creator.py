import os
import json
from typing import Dict, List, Tuple
from google import genai
from google.genai import types

class MealPlanCreatorAgent:
    """
    Agent responsible for generating a week-long meal plan using the Gemini API.
    """
    def __init__(self, family_size: int = 5, model_name: str = 'gemini-2.5-flash'):
        self.family_size = family_size
        self.model_name = model_name
        
        # Initialize the Gemini client. It automatically looks for the 
        # GEMINI_API_KEY environment variable set in the environment.
        try:
            # Check if API key is set before creating the client
            if not os.getenv("GEMINI_API_KEY"):
                 raise ValueError("GEMINI_API_KEY environment variable is not set.")

            self.client = genai.Client()
            print(f"Meal Plan Agent initialized for a family of {self.family_size} using {self.model_name}.")
        except Exception as e:
            print("ERROR: Failed to initialize Gemini Client.")
            print(f"Please check your environment variables and installation. Details: {e}")
            self.client = None

    def _get_user_prompt(self) -> str:
        """Prompts the user for details to build a detailed prompt for Gemini."""
        print("\n--- Meal Preferences ---")
        print(f"I'll plan for 7 days (Breakfast/Dinner) for {self.family_size} people.")
        
        user_input = input("Enter preferred dishes, allergies, or dietary goals (e.g., 'Tacos, Chicken, no nuts, high protein'):\n> ")
        return user_input

    def generate_plan(self) -> Dict:
        """
        Calls the Gemini API to create a structured JSON meal plan.
        Returns a dictionary structure: {Day: {MealType: {dish: str, ingredients: List[str]}}}
        """
        if not self.client:
            return {}

        user_prefs = self._get_user_prompt()
        
        # Define the desired structured output schema (truncated for brevity but extensible)
        meal_schema = types.Schema(
            type=types.Type.OBJECT,
            properties={"dish": types.Schema(type=types.Type.STRING), "ingredients": types.Schema(type=types.Type.ARRAY, items=types.Schema(type=types.Type.STRING))}
        )
        meal_plan_schema = types.Schema(
            type=types.Type.OBJECT,
            properties={
                day: types.Schema(
                    type=types.Type.OBJECT,
                    properties={"Breakfast": meal_schema, "Dinner": meal_schema},
                    required=["Breakfast", "Dinner"]
                ) for day in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
            },
            required=["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] 
        )

        # Craft the detailed prompt and system instructions
        system_instruction = (
            "You are an expert meal planning assistant. Your task is to generate a complete 7-day meal plan "
            "for a family of 5, including Breakfast and Dinner. ONLY respond with a valid, clean JSON object "
            "that strictly adheres to the provided schema. Do not include any explanations, greetings, or formatting outside the JSON."
        )

        prompt = (
            f"Generate a 7-day family meal plan (Breakfast and Dinner) for {self.family_size} people. "
            f"The user has the following preferences/restrictions: '{user_prefs}'. "
            f"List simple, common ingredients for each dish, including suggested quantities for a family of {self.family_size} (e.g., '1 large onion', '500g chicken breast')."
        )
        
        config = types.GenerateContentConfig(
            system_instruction=system_instruction,
            response_mime_type="application/json",
            response_schema=meal_plan_schema,
            temperature=0.7 
        )

        print("\n-- Calling Gemini API to generate meal plan... (This may take a moment) --")
        
        try:
            response = self.client.models.generate_content(
                model=self.model_name,
                contents=prompt,
                config=config,
            )
            
            meal_plan_json = json.loads(response.text)

            print("\n--- Suggested Weekly Meal Plan (Generated by Gemini) ---")
            for day, meals in meal_plan_json.items():
                breakfast = meals.get("Breakfast", {}).get("dish", "N/A")
                dinner = meals.get("Dinner", {}).get("dish", "N/A")
                print(f"**{day}**: Breakfast: {breakfast} | Dinner: {dinner}")

            return meal_plan_json

        except Exception as e:
            print(f"\nERROR: Failed to get structured response from Gemini API: {e}")
            return {}

    def export_plan_to_anylist(self, meal_plan: Dict):
        """Placeholder method for AnyList meal plan integration."""
        if meal_plan:
            print("\n[Integration Placeholder] Meal plan data ready for AnyList export (via external API call).")


# This is just a class file, so the main execution block is removed here.